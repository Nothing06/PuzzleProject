import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

class Button
{
   JButton bt;
   int key;
};



class complete extends JDialog{


   JLabel jlb;

    public complete(BufferedImage bi)
     {
         jlb = new JLabel(new ImageIcon(bi));
         getContentPane().add(jlb);
         this.setTitle("Complete");
         this.setSize(300,300);
         this.setModal(true);
          this.setVisible(true);
      }
    
}



public class Puzzle extends JFrame implements ActionListener{

   static Button[] b; // 왼쪽 퍼즐 버튼들을 포함한 구조체 클래스(혹시 몰라서 key를 위해 만듦..)
   static int[] map; // 퍼즐 버튼 숫자들을 저장하고  쉽게 활용하기 위해 만든  퍼즐숫자 배열
   BufferedImage img; // 이미지를 저장할 곳
   static int pieces = 4; // 조각의 개수를 저장할 공간
   static int totalPieces = pieces * pieces;
   static Image[] subImage;
   
   static JPanel p1; // 오른쪽  User Interface 버튼들
   JPanel p2;  // 왼쪽   퍼즐 조각 버튼들
   
   JButton div; // shuffle
   JButton AI; // 자동맞춤 버튼
   static Timer t;
   static JLabel time; // 시간 표시
   static int sec;
   static TimerTask task ;
   
   JLabel move_cnt; // 퍼즐 이동횟수
   int movecnt=0; 
   String move_str;
   
   int idx=0; // 누른 버튼의 index (왼쪽상단부터 1 ... 오른쪽하단 15)
   static int empty_idx=16; // 누르고 나서의 퍼즐 조각(빈 공간) : After_click
   static int push_idx; // pushed_button index
   static boolean status=false; // puzzle_solution(possible: true / impossible: false)
   
   
   
   

   
   
   public static void main(String[] args) {
      // TODO Auto-generated method stub
         Puzzle p = new Puzzle();

   }
   Puzzle()
   {
      setTitle("Puzzle");
      setSize(800,800);
      setLayout(new BorderLayout());
      p1 = new JPanel();
      p2 = new JPanel();
      
      setDefaultCloseOperation(EXIT_ON_CLOSE);sec = 0;
      makeUI(); 
      while(status==false)
      {
         shuffle();
         Get_Solvability();
      }
      
      
      add(p1, BorderLayout.EAST);
      add(p2, BorderLayout.CENTER);
      //pack();
      
      setVisible(true);
   }
   static void Get_Solvability()
   {
      int i,j;
      int check_cnt=0;
      status = false;
      for(i=1;i<=15;i+=1)
      {
         for(j=i;j<=15;j+=1)
         {
            if(map[i]>map[j])
               check_cnt+=1;
         }
      }
      if(check_cnt%2==0)
         status = true;
   }
   static void shuffle()
   {
      Random rand = new Random();
      int ri;
      String tmp;
      int i;
      String num;
      int temp;
      
      if(empty_idx!=16) // 빈칸이 16번째 버튼이 아닐경우 초기화
      {
         b[empty_idx].bt.setEnabled(true);
         for( i=1;i<=15;i+=1)
         {
            num = Integer.toString(i);
            b[i].bt.setText(num);
            map[i] = i;
         }
         b[16].bt.setText("");
         b[16].bt.setEnabled(false);
         map[16]=0; empty_idx=16;
      }
         for( i=1;i<=15;i+=1) // 15번 섞어줌
         {
            ri = rand.nextInt(16)+1;
            if(ri==empty_idx )
            {
               i-=1; continue;
            }
            if(i==empty_idx)
            {
               continue;
            }
            tmp = b[i].bt.getText();
            b[i].bt.setText(b[ri].bt.getText());
            b[ri].bt.setText(tmp);
            temp = map[i];
            map[i] = map[ri];
            map[ri] = temp;
         }
      
         
   }
   
   public void getImage(){
      subImage = new Image[totalPieces];
      try{
         img = ImageIO.read(new File("C.png"));
         } catch(IOException e){
            System.out.println(e.getMessage());
            System.exit(0);
         }
      
      int pieceHeight = img.getHeight(null) / pieces;
      int pieceWidth = img.getWidth(null) / pieces;
      int cnt = 0;
      for(int x = 0; x < pieces; x++){
         int sx = x * pieceWidth;
            for(int y = 0; y < pieces; y++){
               int sy = y *pieceHeight;
               subImage[cnt] = img.getSubimage(sx,sy,pieceWidth,pieceHeight);
               cnt++;
            }
      }
   }

   
   private void makeUI()
   {
      int i;
      int n;
      String s;
      getImage();
      
      
      p1.setLayout(new GridLayout(0,1));
      p2.setLayout(new GridLayout(5,5));
      b = new Button[17];
      map = new int[17];
      for(i=1;i<=16;i+=1)
      {
         b[i] = new Button();
         
         if(i==16)
         {
            
            b[i].bt = new JButton("");
            b[i].bt.setFont(new Font("고딕",Font.ITALIC,30));
            b[i].bt.addActionListener(this);
            b[i].bt.setEnabled(false);
            map[i] = 0;
            
            p2.add(b[i].bt);   
            break;
         }
         n = i;
         s = Integer.toString(n);
         ImageIcon puzzleImg = new ImageIcon(subImage[i]);
         b[i].bt = new JButton("",puzzleImg);
         b[i].bt.setFont(new Font("고딕",Font.ITALIC,30));
         b[i].bt.setText(s);
         b[i].bt.addActionListener(this);
         map[i]=i;
         
         p2.add(b[i].bt);   
      }
      JLabel design = new JLabel("* User Interface *");
      design.setFont(new Font("Dialog", Font.ITALIC,40));
      div = new JButton();
      div.setText("Shuffle");
      div.addActionListener(this);
      AI= new JButton("A  I  ");
      AI.addActionListener(this);
      
      time = new JLabel("Time: ");
      
      
      move_cnt = new JLabel("    이동횟수: 0");
      move_cnt.setFont(new Font("Dialog", Font.ITALIC,20));
      
      p1.add(design);
      p1.add(div);
      p1.add(AI);
      p1.add(time);
      p1.add(move_cnt);
      
      t = new Timer(true);
      task = new timer();
      t.schedule(task,new Date(),1000);
      
      p1.repaint();
      p2.repaint();
   }
   int check_4way(int id)
   {
      if(id==1)
      {
         if(b[id+1].bt.isEnabled()==false)
            return id+1;
         else if(b[id+4].bt.isEnabled()==false)
            return id+4;
         else 
            return -1; // -1 : 이웃한 퍼즐중에 빈칸이없다는 뜻.
      }
      else if(id>=2 && id<=3)
      {
         if(b[id+1].bt.isEnabled()==false)
            return id+1;
         else if(b[id-1].bt.isEnabled()==false)
            return id-1;
         else if(b[id+4].bt.isEnabled()==false)
            return id+4;
         else
            return -1;
      }
      else if(id>=14 && id<=15)
      {
         if(b[id+1].bt.isEnabled()==false)
            return id+1;
         else if(b[id-1].bt.isEnabled()==false)
            return id-1;
         else if(b[id-4].bt.isEnabled()==false)
            return id-4;
         else
            return -1;
      }
      else if(id==4)
      {
         if(b[id-1].bt.isEnabled()==false)
            return id-1;
         else if(b[id+4].bt.isEnabled()==false)
            return id+4;
         else 
            return -1;
      }
      else if(id==5 || id==9)
      {
         if(b[id+1].bt.isEnabled()==false)
            return id+1;
         else if(b[id+4].bt.isEnabled()==false)
            return id+4;
         else if(b[id-4].bt.isEnabled()==false)
            return id-4;
         else 
            return -1;
      }
      else if((id>=6 && id<=7) || (id>=10 && id<=11))
      {
         if(b[id+1].bt.isEnabled()==false)
            return id+1;
         else if(b[id-1].bt.isEnabled()==false)
            return id-1;
         else if(b[id+4].bt.isEnabled()==false)
            return id+4;
         else if(b[id-4].bt.isEnabled()==false)
            return id-4;
         else 
            return -1;
      }
      else if(id==8 || id==12)
      {
         if(b[id-1].bt.isEnabled()==false)
            return id-1;
         else if(b[id+4].bt.isEnabled()==false)
            return id+4;
         else if(b[id-4].bt.isEnabled()==false)
            return id-4;
      }
      else if(id==13)
      {
         if(b[id+1].bt.isEnabled()==false)
            return id+1;
         else if(b[id-4].bt.isEnabled()==false)
            return id-4;
         else 
            return -1;
      }
      else if(id==16)
      {
         if(b[id-1].bt.isEnabled()==false)
            return id-1;
         else if(b[id-4].bt.isEnabled()==false)
            return id-4;
         else 
            return -1;
      }
      return -1;
   }
   boolean check_finished()
   {
      int i;
      boolean t=false;
      
      for( i=1;i<=15;i+=1)
      {
         if(map[i]!=i)
         {
            t= false;
            return t;
         }
      }
      t=true;
      return t;
   }
   @Override
   public void actionPerformed(ActionEvent e) {
      // TODO Auto-generated method stub
      JButton act, inact;
      String act_str;
      String inact_str;
      String check_str;
      int check_num=0;
      int push_num=0;
      int tmp_idx=0; // 빈칸 idx
      int idx=0;  // pushed_button's idx
      int i=0;
      JButton pushed;
      int tmp;
      
      if(e.getSource() == div)
      {
         status = false;
         while(status==false)
         {
            shuffle();
            Get_Solvability();
         }
         timer.cancel(t,task); //timer class 메서드 사용
         t = new Timer(true);
         task = new timer();
         t.schedule(task,new Date(),1000);
         
         movecnt=0;
         move_str = String.format("    이동횟수: %d",movecnt);
         move_cnt.setText(move_str);
         p1.repaint();
         p2.repaint();
         return;
      }
      else if(e.getSource()==AI)
      {
         return;
      }
      
      pushed = (JButton)e.getSource();
      act_str = pushed.getText();
      push_num = Integer.parseInt(act_str);
      
      for( i=1;i<=16;i+=1)
      {
         check_str = b[i].bt.getText();
         if(check_str=="")
            continue;
         check_num = Integer.parseInt(check_str);
         if(check_num==push_num)
         {
            idx = i; push_idx = i;
            break;
         }
      }
      tmp_idx = check_4way(idx);
      if(tmp_idx==-1)
         return;
      
      empty_idx= idx; //empty_idx는 누르면 비는 공간
      b[tmp_idx].bt.setEnabled(true);
      b[tmp_idx].bt.setText(act_str);
      ImageIcon setImg = new ImageIcon(subImage[Integer.parseInt(act_str)]);
      b[tmp_idx].bt.setIcon(setImg);
      
      b[idx].bt.setText("");
      b[idx].bt.setIcon(null);
      b[idx].bt.setEnabled(false);
      
      tmp = map[idx];
      map[idx] = 0;
      map[tmp_idx] = tmp;
      

      
      movecnt+=1;
      move_str = String.format("    %d Moved",movecnt);
      move_cnt.setText(move_str);
      
      
      boolean c = check_finished();
      BufferedImage img= null;;
      /*try {
         img = ImageIO.read(new File("C.png"));
      } catch (IOException e2) {
         // TODO Auto-generated catch block
         e2.printStackTrace();
      }
      complete cp = new complete(" Puzzle Complete!!! ",img);
      cp.setIconImage(img);*/
      if(c == true)
      {
         t.cancel();
//         BufferedImage img= null;;
         try
         {
            img = ImageIO.read(new File("C.png"));
         }
         catch(IOException e1)
         {
            System.out.println("Img read error!");
            System.exit(1);
         }
         
         complete cp = new complete(img);
         cp.setIconImage(img);
         
      }
      p1.repaint();
      p2.repaint();
   }
}